"""  
문제
외판원 순회 문제는 영어로 Traveling Salesman problem (TSP) 라고 불리는 문제로 computer science 분야에서 가장 중요하게 취급되는 문제 중 하나이다. 여러 가지 변종 문제가 있으나, 여기서는 가장 일반적인 형태의 문제를 살펴보자.

1번부터 N번까지 번호가 매겨져 있는 도시들이 있고, 도시들 사이에는 길이 있다. (길이 없을 수도 있다) 이제 한 외판원이 어느 한 도시에서 출발해 N개의 도시를 모두 거쳐 다시 원래의 도시로 돌아오는 순회 여행 경로를 계획하려고 한다. 단, 한 번 갔던 도시로는 다시 갈 수 없다. (맨 마지막에 여행을 출발했던 도시로 돌아오는 것은 예외) 이런 여행 경로는 여러 가지가 있을 수 있는데, 가장 적은 비용을 들이는 여행 계획을 세우고자 한다.

각 도시간에 이동하는데 드는 비용은 행렬 W[i][j]형태로 주어진다. W[i][j]는 도시 i에서 도시 j로 가기 위한 비용을 나타낸다. 비용은 대칭적이지 않다. 즉, W[i][j] 는 W[j][i]와 다를 수 있다. 모든 도시간의 비용은 양의 정수이다. W[i][i]는 항상 0이다. 경우에 따라서 도시 i에서 도시 j로 갈 수 없는 경우도 있으며 이럴 경우 W[i][j]=0이라고 하자.

N과 비용 행렬이 주어졌을 때, 가장 적은 비용을 들이는 외판원의 순회 여행 경로를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 도시의 수 N이 주어진다. (2 ≤ N ≤ 10) 다음 N개의 줄에는 비용 행렬이 주어진다. 각 행렬의 성분은 1,000,000 이하의 양의 정수이며, 갈 수 없는 경우는 0이 주어진다. W[i][j]는 도시 i에서 j로 가기 위한 비용을 나타낸다.

항상 순회할 수 있는 경우만 입력으로 주어진다.

출력
첫째 줄에 외판원의 순회에 필요한 최소 비용을 출력한다.



"""
# 경우의 수들중에서 가장빠를것을 탐색해야함을 완전탐색을 사용해야한다
# 첫째줄에 는 도시의 수 두번째 입력에는 각 길의 비용이 들어간다.
# 일단 순회하는 길을 찾아보자
# 1.i는 1부터 시작(0번에서 출발하기 떄문에) for 문 또는 while문의 시작 
# 
# j는 1 부터 시작 -> (마지막에서 0으로 복귀) 여기서 이전 값의 순서는 0으로 미리 처리( 다시 되돌아갈 수 없기 떄문)
# 3. z는 1부터 시작 (a마지막에 자기한테 갈ㄱ거니까.) 이전 값의 순서는 0으로 미리 처리( 다시 되돌아갈 수 없기 떄문)
# 4.첫번째로 가는 첫번째 길로 이동

##############################################
""" 

결국은 Dp와 비트 연산자로 구현을 도전해 봐야할듯
방문의 결과는 비트마스킹으로 한다
0001은 첫번째 마을방문
0011은 첫번째 두번째 마을 방문
0111은 첫번째 두번쨰 세번째 마을 방문
1111은 모든 마을 방문
1 << 1 은 1을 1만큼 좌측으로 shift해라 
 -> 0010
1 <<2 는 1을 2만큼 좌측으로 shift 해라
 -> 0100

##중요## dp의열변식을 어떻게 할것인지가 문제....
##중요## 규칙을 찾아보자... 지속적으로 똑같은게 반복되는..

일단 재귀를 짜자

n은 4일때
M은 0,1,2,3 값중 하나
1. 0번째 마을에서 M마을로 이동
2 M 마을은 0번째 마을로 돌아갈 수 없다 남은 두가지 마을 중 하나 이동
3. M+1 마을은  M 번째 마을로 돌아갈 수 없고 M+2 마을로 이동한다.
4. M+2 마을은 0번째 마을로 이동한다.




"""

# 입력 받기
N = int(input())
graph = []
for _ in range(N):
    graph.append(list(map(int, input().split())))

